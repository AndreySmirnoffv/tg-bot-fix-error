import { yooController } from "./index.js";
import { $payment, $user } from "./mongoose.js";
import information from './ifo.json' with {type: "json"}

export class Payment {
    constructor() { }

    async updatePaymentStatus(paymentId, status) {
        try {
            const result = await $payment.updateOne(
                { paymentId: paymentId },
                { $set: { status: status } }
            );
            console.log('Update Result:', result);
            return result;
        } catch (error) {
            console.error('Update Error:', error);
            throw error;
        }
    }


    isPaymentRecent(createdAt) {
        const tenMinutes = 10 * 60 * 1000;
        const paymentDate = new Date(createdAt).getTime();
        const now = Date.now();
        return now - paymentDate <= tenMinutes;
    }

    async insertPayment(paymentData) {
        const { paymentId, userId, paymentDate, amount, paymentMethod, status, username } = paymentData;
        return new Promise(async (resolve, reject) => {
            try {
                const result = await $payment.updateOne(
                    { paymentId: paymentId },
                    {
                        $set: {
                            userId: userId,
                            paymentDate: paymentDate, // –ó–¥–µ—Å—å –º—ã –ø–µ—Ä–µ–¥–∞–µ–º paymentDate –∫–∞–∫ —Å—Ç—Ä–æ–∫—É
                            amount: amount,
                            paymentMethod: paymentMethod,
                            status: status,
                            username: username
                        }
                    },
                    { upsert: true }
                );
                console.log('Insert Payment Result:', result);
                resolve(result);
            } catch (error) {
                console.error('Insert Payment Error:', error);
                reject(error);
            }
        });
    }



    async updateUserBalance(chatId, amount) {
        try {
            // –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ chatId —á–∏—Å–ª–æ–º
            if (isNaN(chatId)) {
                throw new Error(`Invalid chatId: ${chatId}`);
            }

            if (isNaN(amount)) {
                throw new Error(`Invalid amount: ${amount}`);
            }

            // –ù–∞–π–¥–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            const user = await $user.findOne({ id: Number(chatId) });
            if (!user) {
                throw new Error(`User with chatId ${chatId} not found.`);
            }

            // –†–∞—Å—Å—á–∏—Ç–∞–π—Ç–µ –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å
            const newBalance = (user.balance || 0) + Number(amount);

            // –û–±–Ω–æ–≤–∏—Ç–µ –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            const result = await $user.updateOne(
                { id: Number(chatId) },  // –ü—Ä–∏–≤–µ–¥–µ–Ω–∏–µ chatId –∫ —á–∏—Å–ª—É
                { $set: { balance: newBalance } }
            );

            console.log('Update Balance Result:', result); // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            return result;
        } catch (error) {
            throw "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: " + error;
        }
    }



    async topUpBalance(bot, chatId, payload, user) {
        const username = bot.from?.username || "unknown";

        try {
            const { amount, currency, paymentType, returnUrl } = payload;

            const result = await yooController.createPayment({
                amount,
                currency,
                paymentType,
                returnUrl
            });

            const paymentId = result.id;
            const createdAt = new Date(result.created_at);
            console.log(createdAt.toISOString().slice(0, 19).replace('T', ' ').replace('Z', " "));

            await bot.telegram.sendMessage(chatId, `*‚òëÔ∏è –°—á—ë—Ç –Ω–∞ —Å—É–º–º—É: ${Number(amount)}‚ÇΩ - –≤—ã—Å—Ç–∞–≤–ª–µ–Ω! –ù–æ –µ—â—ë –Ω–µ –æ–ø–ª–∞—á–µ–Ω.*`, {
                reply_markup: {
                    inline_keyboard: [
                        [{
                            text: 'üü¢ –û–ø–ª–∞—Ç–∏—Ç—å —Å—á—ë—Ç',
                            url: result.confirmation.confirmation_url
                        }]
                    ]
                },
                parse_mode: 'Markdown'
            });

            await this.insertPayment({
                paymentId,
                chatId,
                paymentDate: createdAt.toISOString().slice(0, 19).replace('T', ' ').replace('Z', " "),
                amount,
                paymentMethod: result.payment_method.type,
                status: result.status,
                username
            });


            let isCaptured = false;
            const checkPaymentStatus = async () => {
                try {
                    const paymentDetails = await yooController.getPayment(paymentId);
                    const currentTime = new Date();
                    const paymentTime = new Date(paymentDetails.created_at);
                    const timeDifference = (currentTime - paymentTime) / (1000 * 60);

                    if (timeDifference > 10) {
                        console.log('Payment is older than 10 minutes, skipping capture.');
                        await bot.telegram.sendMessage(chatId, "–í—ã –ø—Ä–æ—Å—Ä–æ—á–∏–ª–∏ –ø–ª–∞—Ç–µ–∂, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.");
                        clearInterval(statusInterval);
                        return;
                    }

                    if (paymentDetails.status === 'waiting_for_capture' && !isCaptured) {
                        const capturePayload = {
                            amount: {
                                value: amount,
                                currency: 'RUB'
                            }
                        };
                        await yooController.capturePayment(paymentId, capturePayload);
                        console.log(`Payment ${paymentId} successfully captured.`);
                        isCaptured = true;
                    }

                    const updatedPaymentDetails = await yooController.getPayment(paymentId);

                    if (updatedPaymentDetails.status === 'succeeded') {
                        await this.updatePaymentStatus(paymentId, 'succeeded');
                        await this.updateUserBalance(chatId, amount);
                        console.log("–≤—Å–µ –≥—É–¥");
                        await bot.telegram.sendMessage(`${user.id}`, `‚úÖ –ü–û–ü–û–õ–ù–ï–ù–ò–ï –ë–ê–õ–ê–ù–°–ê:\n‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\nü•≥ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í–∞—à –ø–ª–∞—Ç—ë–∂ –ø—Ä–æ—à—ë–ª —É—Å–ø–µ—à–Ω–æ!\n\nüíµ –í–∞—à –±–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ —Å—É–º–º—É: +${amount} ‚ÇΩ\nüåç –°—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã: ¬´—É—Å–ø–µ—à–Ω–æ –æ–ø–ª–∞—á–µ–Ω¬ª\n\n‚úÖ –ú–æ–∂–µ—Ç–µ –ø—Ä–∏—Å—Ç—É–ø–∞—Ç—å –∫ –≤—ã–±–æ—Ä—É –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–≥–æ —Ç–∞—Ä–∏—Ñ–∞!`).catch(err => console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é:', err));
                        await bot.telegram.sendMessage(`${Number(information.channel)}`, `‚úÖ –ü–õ–ê–¢–ï–ñ –£–°–ü–ï–®–ù–û –ü–†–û–í–ï–î–Å–ù!\n‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\nü§µ‚Äç‚ôÇÔ∏è –ö–ª–∏–µ–Ω—Ç: @${user.userNick}\nüÜî ID –≤ –±–æ—Ç–µ: #${user.uid} | Telegram ID: ${user.id}\nüåü –ü–æ–ø–æ–ª–Ω–∏–ª —Å–≤–æ–π –±–∞–ª–∞–Ω—Å!\nüí∞ –°—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: ${amount} ‚ÇΩ\nüí≥ –°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: ¬´–Ækassa¬ª`).catch(err => console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–∞–Ω–∞–ª:', err));
                        await bot.telegram.sendMessage(`${Number(information.allConsoleLogs)}`, `‚úÖ –ü–õ–ê–¢–ï–ñ –£–°–ü–ï–®–ù–û –ü–†–û–í–ï–î–Å–ù!\n‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\nü§µ‚Äç‚ôÇÔ∏è –ö–ª–∏–µ–Ω—Ç: @${user.userNick}\nüÜî ID –≤ –±–æ—Ç–µ: #${user.uid} | Telegram ID: ${user.id}\nüåü –ü–æ–ø–æ–ª–Ω–∏–ª —Å–≤–æ–π –±–∞–ª–∞–Ω—Å!\nüí∞ –°—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: ${amount} ‚ÇΩ\nüí≥ –°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: ¬´–Ækassa¬ª`).catch(err => console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–æ–Ω—Å–æ–ª—å:', err));
                        clearInterval(statusInterval);
                    }
                } catch (error) {
                    console.error('Error checking payment status:', error);
                    await bot.telegram.sendMessage(chatId, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞.", {
                        reply_markup: {
                            inline_keyboard: [
                                [{ text: "–ù–∞ –≥–ª–∞–≤–Ω—É—é", callback_data: "start" }]
                            ]
                        }
                    });
                }
            };

            const statusInterval = setInterval(checkPaymentStatus, 5000);
        } catch (error) {
            await bot.telegram.sendMessage(chatId, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞.", {
                reply_markup: {
                    inline_keyboard: [
                        [{ text: "–ù–∞ –≥–ª–∞–≤–Ω—É—é", callback_data: "start" }]
                    ]
                }
            });
            throw 'Error during top-up: ' + error;
        }
    }

}
